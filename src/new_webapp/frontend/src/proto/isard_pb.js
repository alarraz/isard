/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('@/proto/third_party/google/api/annotations_pb.js');
var protoc$gen$swagger_options_annotations_pb = require('@/proto/third_party/protoc-gen-swagger/options/annotations_pb.js');
goog.exportSymbol('proto.isard.Desktop', null, global);
goog.exportSymbol('proto.isard.DesktopStartRequest', null, global);
goog.exportSymbol('proto.isard.DesktopStartResponse', null, global);
goog.exportSymbol('proto.isard.DesktopState', null, global);
goog.exportSymbol('proto.isard.DomainOptions', null, global);
goog.exportSymbol('proto.isard.DomainOptions.Viewers', null, global);
goog.exportSymbol('proto.isard.DomainOptions.Viewers.Spice', null, global);
goog.exportSymbol('proto.isard.LoginLocalRequest', null, global);
goog.exportSymbol('proto.isard.LoginLocalResponse', null, global);
goog.exportSymbol('proto.isard.Permissions', null, global);
goog.exportSymbol('proto.isard.UserDesktopsGetRequest', null, global);
goog.exportSymbol('proto.isard.UserDesktopsGetResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.Permissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isard.Permissions.repeatedFields_, null);
};
goog.inherits(proto.isard.Permissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.Permissions.displayName = 'proto.isard.Permissions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isard.Permissions.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.Permissions.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.Permissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.Permissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.Permissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_public: jspb.Message.getFieldWithDefault(msg, 1, false),
    rolesList: jspb.Message.getRepeatedField(msg, 2),
    categoriesList: jspb.Message.getRepeatedField(msg, 3),
    usersList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.Permissions}
 */
proto.isard.Permissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.Permissions;
  return proto.isard.Permissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.Permissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.Permissions}
 */
proto.isard.Permissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategories(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.Permissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.Permissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.Permissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.Permissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublic();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional bool public = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.isard.Permissions.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.isard.Permissions.prototype.setPublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string roles = 2;
 * @return {!Array<string>}
 */
proto.isard.Permissions.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.isard.Permissions.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.isard.Permissions.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.isard.Permissions.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * repeated string categories = 3;
 * @return {!Array<string>}
 */
proto.isard.Permissions.prototype.getCategoriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.isard.Permissions.prototype.setCategoriesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.isard.Permissions.prototype.addCategories = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.isard.Permissions.prototype.clearCategoriesList = function() {
  this.setCategoriesList([]);
};


/**
 * repeated string users = 4;
 * @return {!Array<string>}
 */
proto.isard.Permissions.prototype.getUsersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.isard.Permissions.prototype.setUsersList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.isard.Permissions.prototype.addUsers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.isard.Permissions.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.DomainOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.DomainOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.DomainOptions.displayName = 'proto.isard.DomainOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.DomainOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.DomainOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.DomainOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DomainOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewers: (f = msg.getViewers()) && proto.isard.DomainOptions.Viewers.toObject(includeInstance, f),
    server: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.DomainOptions}
 */
proto.isard.DomainOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.DomainOptions;
  return proto.isard.DomainOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.DomainOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.DomainOptions}
 */
proto.isard.DomainOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.isard.DomainOptions.Viewers;
      reader.readMessage(value,proto.isard.DomainOptions.Viewers.deserializeBinaryFromReader);
      msg.setViewers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.DomainOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.DomainOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.DomainOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DomainOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.isard.DomainOptions.Viewers.serializeBinaryToWriter
    );
  }
  f = message.getServer();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.DomainOptions.Viewers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.DomainOptions.Viewers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.DomainOptions.Viewers.displayName = 'proto.isard.DomainOptions.Viewers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.DomainOptions.Viewers.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.DomainOptions.Viewers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.DomainOptions.Viewers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DomainOptions.Viewers.toObject = function(includeInstance, msg) {
  var f, obj = {
    spice: (f = msg.getSpice()) && proto.isard.DomainOptions.Viewers.Spice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.DomainOptions.Viewers}
 */
proto.isard.DomainOptions.Viewers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.DomainOptions.Viewers;
  return proto.isard.DomainOptions.Viewers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.DomainOptions.Viewers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.DomainOptions.Viewers}
 */
proto.isard.DomainOptions.Viewers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.isard.DomainOptions.Viewers.Spice;
      reader.readMessage(value,proto.isard.DomainOptions.Viewers.Spice.deserializeBinaryFromReader);
      msg.setSpice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.DomainOptions.Viewers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.DomainOptions.Viewers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.DomainOptions.Viewers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DomainOptions.Viewers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.isard.DomainOptions.Viewers.Spice.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.DomainOptions.Viewers.Spice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.DomainOptions.Viewers.Spice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.DomainOptions.Viewers.Spice.displayName = 'proto.isard.DomainOptions.Viewers.Spice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.DomainOptions.Viewers.Spice.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.DomainOptions.Viewers.Spice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.DomainOptions.Viewers.Spice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DomainOptions.Viewers.Spice.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullscreen: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.DomainOptions.Viewers.Spice}
 */
proto.isard.DomainOptions.Viewers.Spice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.DomainOptions.Viewers.Spice;
  return proto.isard.DomainOptions.Viewers.Spice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.DomainOptions.Viewers.Spice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.DomainOptions.Viewers.Spice}
 */
proto.isard.DomainOptions.Viewers.Spice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.DomainOptions.Viewers.Spice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.DomainOptions.Viewers.Spice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.DomainOptions.Viewers.Spice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DomainOptions.Viewers.Spice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullscreen();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool fullscreen = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.isard.DomainOptions.Viewers.Spice.prototype.getFullscreen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.isard.DomainOptions.Viewers.Spice.prototype.setFullscreen = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Spice spice = 1;
 * @return {?proto.isard.DomainOptions.Viewers.Spice}
 */
proto.isard.DomainOptions.Viewers.prototype.getSpice = function() {
  return /** @type{?proto.isard.DomainOptions.Viewers.Spice} */ (
    jspb.Message.getWrapperField(this, proto.isard.DomainOptions.Viewers.Spice, 1));
};


/** @param {?proto.isard.DomainOptions.Viewers.Spice|undefined} value */
proto.isard.DomainOptions.Viewers.prototype.setSpice = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.isard.DomainOptions.Viewers.prototype.clearSpice = function() {
  this.setSpice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.isard.DomainOptions.Viewers.prototype.hasSpice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Viewers viewers = 1;
 * @return {?proto.isard.DomainOptions.Viewers}
 */
proto.isard.DomainOptions.prototype.getViewers = function() {
  return /** @type{?proto.isard.DomainOptions.Viewers} */ (
    jspb.Message.getWrapperField(this, proto.isard.DomainOptions.Viewers, 1));
};


/** @param {?proto.isard.DomainOptions.Viewers|undefined} value */
proto.isard.DomainOptions.prototype.setViewers = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.isard.DomainOptions.prototype.clearViewers = function() {
  this.setViewers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.isard.DomainOptions.prototype.hasViewers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool server = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.isard.DomainOptions.prototype.getServer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.isard.DomainOptions.prototype.setServer = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.Desktop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.Desktop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.Desktop.displayName = 'proto.isard.Desktop';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.Desktop.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.Desktop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.Desktop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.Desktop.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    detail: jspb.Message.getFieldWithDefault(msg, 7, ""),
    user: jspb.Message.getFieldWithDefault(msg, 11, ""),
    os: jspb.Message.getFieldWithDefault(msg, 14, ""),
    options: (f = msg.getOptions()) && proto.isard.DomainOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.Desktop}
 */
proto.isard.Desktop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.Desktop;
  return proto.isard.Desktop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.Desktop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.Desktop}
 */
proto.isard.Desktop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {!proto.isard.DesktopState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 18:
      var value = new proto.isard.DomainOptions;
      reader.readMessage(value,proto.isard.DomainOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.Desktop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.Desktop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.Desktop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.Desktop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.isard.DomainOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.isard.Desktop.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isard.Desktop.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.isard.Desktop.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.isard.Desktop.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.isard.Desktop.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.isard.Desktop.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DesktopState state = 6;
 * @return {!proto.isard.DesktopState}
 */
proto.isard.Desktop.prototype.getState = function() {
  return /** @type {!proto.isard.DesktopState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.isard.DesktopState} value */
proto.isard.Desktop.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string detail = 7;
 * @return {string}
 */
proto.isard.Desktop.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.isard.Desktop.prototype.setDetail = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string user = 11;
 * @return {string}
 */
proto.isard.Desktop.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.isard.Desktop.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string os = 14;
 * @return {string}
 */
proto.isard.Desktop.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.isard.Desktop.prototype.setOs = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional DomainOptions options = 18;
 * @return {?proto.isard.DomainOptions}
 */
proto.isard.Desktop.prototype.getOptions = function() {
  return /** @type{?proto.isard.DomainOptions} */ (
    jspb.Message.getWrapperField(this, proto.isard.DomainOptions, 18));
};


/** @param {?proto.isard.DomainOptions|undefined} value */
proto.isard.Desktop.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.isard.Desktop.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.isard.Desktop.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.LoginLocalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.LoginLocalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.LoginLocalRequest.displayName = 'proto.isard.LoginLocalRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.LoginLocalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.LoginLocalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.LoginLocalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.LoginLocalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pwd: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.LoginLocalRequest}
 */
proto.isard.LoginLocalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.LoginLocalRequest;
  return proto.isard.LoginLocalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.LoginLocalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.LoginLocalRequest}
 */
proto.isard.LoginLocalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPwd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.LoginLocalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.LoginLocalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.LoginLocalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.LoginLocalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPwd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.isard.LoginLocalRequest.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isard.LoginLocalRequest.prototype.setApi = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string usr = 2;
 * @return {string}
 */
proto.isard.LoginLocalRequest.prototype.getUsr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.isard.LoginLocalRequest.prototype.setUsr = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pwd = 3;
 * @return {string}
 */
proto.isard.LoginLocalRequest.prototype.getPwd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.isard.LoginLocalRequest.prototype.setPwd = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.LoginLocalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.LoginLocalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.LoginLocalResponse.displayName = 'proto.isard.LoginLocalResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.LoginLocalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.LoginLocalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.LoginLocalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.LoginLocalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tkn: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.LoginLocalResponse}
 */
proto.isard.LoginLocalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.LoginLocalResponse;
  return proto.isard.LoginLocalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.LoginLocalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.LoginLocalResponse}
 */
proto.isard.LoginLocalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTkn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.LoginLocalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.LoginLocalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.LoginLocalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.LoginLocalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTkn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tkn = 1;
 * @return {string}
 */
proto.isard.LoginLocalResponse.prototype.getTkn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isard.LoginLocalResponse.prototype.setTkn = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.UserDesktopsGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.UserDesktopsGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.UserDesktopsGetRequest.displayName = 'proto.isard.UserDesktopsGetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.UserDesktopsGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.UserDesktopsGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.UserDesktopsGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.UserDesktopsGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.UserDesktopsGetRequest}
 */
proto.isard.UserDesktopsGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.UserDesktopsGetRequest;
  return proto.isard.UserDesktopsGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.UserDesktopsGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.UserDesktopsGetRequest}
 */
proto.isard.UserDesktopsGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.UserDesktopsGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.UserDesktopsGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.UserDesktopsGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.UserDesktopsGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.isard.UserDesktopsGetRequest.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isard.UserDesktopsGetRequest.prototype.setApi = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.isard.UserDesktopsGetRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.isard.UserDesktopsGetRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.UserDesktopsGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isard.UserDesktopsGetResponse.repeatedFields_, null);
};
goog.inherits(proto.isard.UserDesktopsGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.UserDesktopsGetResponse.displayName = 'proto.isard.UserDesktopsGetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isard.UserDesktopsGetResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.UserDesktopsGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.UserDesktopsGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.UserDesktopsGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.UserDesktopsGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desktopsList: jspb.Message.toObjectList(msg.getDesktopsList(),
    proto.isard.Desktop.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.UserDesktopsGetResponse}
 */
proto.isard.UserDesktopsGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.UserDesktopsGetResponse;
  return proto.isard.UserDesktopsGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.UserDesktopsGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.UserDesktopsGetResponse}
 */
proto.isard.UserDesktopsGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = new proto.isard.Desktop;
      reader.readMessage(value,proto.isard.Desktop.deserializeBinaryFromReader);
      msg.addDesktops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.UserDesktopsGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.UserDesktopsGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.UserDesktopsGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.UserDesktopsGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesktopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.isard.Desktop.serializeBinaryToWriter
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.isard.UserDesktopsGetResponse.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isard.UserDesktopsGetResponse.prototype.setApi = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Desktop desktops = 2;
 * @return {!Array<!proto.isard.Desktop>}
 */
proto.isard.UserDesktopsGetResponse.prototype.getDesktopsList = function() {
  return /** @type{!Array<!proto.isard.Desktop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.isard.Desktop, 2));
};


/** @param {!Array<!proto.isard.Desktop>} value */
proto.isard.UserDesktopsGetResponse.prototype.setDesktopsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.isard.Desktop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.isard.Desktop}
 */
proto.isard.UserDesktopsGetResponse.prototype.addDesktops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.isard.Desktop, opt_index);
};


proto.isard.UserDesktopsGetResponse.prototype.clearDesktopsList = function() {
  this.setDesktopsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.DesktopStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isard.DesktopStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.DesktopStartRequest.displayName = 'proto.isard.DesktopStartRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.DesktopStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.DesktopStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.DesktopStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DesktopStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.DesktopStartRequest}
 */
proto.isard.DesktopStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.DesktopStartRequest;
  return proto.isard.DesktopStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.DesktopStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.DesktopStartRequest}
 */
proto.isard.DesktopStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.DesktopStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.DesktopStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.DesktopStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DesktopStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.isard.DesktopStartRequest.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isard.DesktopStartRequest.prototype.setApi = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.isard.DesktopStartRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.isard.DesktopStartRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isard.DesktopStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isard.DesktopStartResponse.repeatedFields_, null);
};
goog.inherits(proto.isard.DesktopStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.isard.DesktopStartResponse.displayName = 'proto.isard.DesktopStartResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isard.DesktopStartResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isard.DesktopStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.isard.DesktopStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isard.DesktopStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DesktopStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nextActionsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isard.DesktopStartResponse}
 */
proto.isard.DesktopStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isard.DesktopStartResponse;
  return proto.isard.DesktopStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isard.DesktopStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isard.DesktopStartResponse}
 */
proto.isard.DesktopStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.isard.DesktopState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNextActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isard.DesktopStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isard.DesktopStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isard.DesktopStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isard.DesktopStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNextActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional DesktopState state = 1;
 * @return {!proto.isard.DesktopState}
 */
proto.isard.DesktopStartResponse.prototype.getState = function() {
  return /** @type {!proto.isard.DesktopState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.isard.DesktopState} value */
proto.isard.DesktopStartResponse.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string next_actions = 2;
 * @return {!Array<string>}
 */
proto.isard.DesktopStartResponse.prototype.getNextActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.isard.DesktopStartResponse.prototype.setNextActionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.isard.DesktopStartResponse.prototype.addNextActions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.isard.DesktopStartResponse.prototype.clearNextActionsList = function() {
  this.setNextActionsList([]);
};


/**
 * @enum {number}
 */
proto.isard.DesktopState = {
  STOPPED: 0,
  STARTED: 1,
  PAUSED: 2,
  DELETED: 3,
  FAILED: 4,
  UNKNOWN: 5
};

goog.object.extend(exports, proto.isard);
